{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to OpenUnderstand An open-source implementation of Understand Python API. Visit source code . Introduction Understand [1] has an extensive API to let developers query the data it captures about their code. It has three flavors: Perl, Python, and C. We work with Python API. All three implementations of the Understand APIs are read-only. They do not modify the Understand project information. If there is a need to modify Understand project information programmatically, the 'und' tool must be used. Unfortunately, the Understand API source code is not publicly available, making it difficult to change and reuse in a different environment. This project aims to provide an open-source implementation of the Understand Python API to analyze the source codes. We primarily focus on implementing the API for Java programs using Python programming languages and compiler tools such as ANTLR [2]. To develop an open-source implementation of Understand Python API, we look at the structures used by Understand for analyzing source codes. Project layout Architecture","title":"Home"},{"location":"#welcome-to-openunderstand","text":"An open-source implementation of Understand Python API. Visit source code .","title":"Welcome to OpenUnderstand"},{"location":"#introduction","text":"Understand [1] has an extensive API to let developers query the data it captures about their code. It has three flavors: Perl, Python, and C. We work with Python API. All three implementations of the Understand APIs are read-only. They do not modify the Understand project information. If there is a need to modify Understand project information programmatically, the 'und' tool must be used. Unfortunately, the Understand API source code is not publicly available, making it difficult to change and reuse in a different environment. This project aims to provide an open-source implementation of the Understand Python API to analyze the source codes. We primarily focus on implementing the API for Java programs using Python programming languages and compiler tools such as ANTLR [2]. To develop an open-source implementation of Understand Python API, we look at the structures used by Understand for analyzing source codes.","title":"Introduction"},{"location":"#project-layout","text":"","title":"Project layout"},{"location":"#architecture","text":"","title":"Architecture"},{"location":"benchmarks/","text":"Benchmark projects Please refer to CodART benchmark projects .","title":"Benchmarks"},{"location":"benchmarks/#benchmark-projects","text":"Please refer to CodART benchmark projects .","title":"Benchmark projects"},{"location":"entity_kinds/","text":"Entity kinds This section explains the general categories of OpenUnderstand entity kinds for different programming languages. Java The total number of OpenUnderstand Java entity kinds is 169. Table 1 lists the general categories of Java entity kinds, the kind names, and the kind examples for use with Python. The Visibility term should be replaced with one concrete access modifier terms, including Default, Private, Protected, Public. General kind keys \u201cDefault\u201d is used in kind names for entities with default visibility. \u201cPublic\u201d is used in kind names for entities declared as having public visibility. \u201cProtected\u201d is used in kind names for entities declared as having protected visibility. \u201cPrivate\u201d is used in kind names for entities declared as having private visibility. \u201cAbstract\" is used in kind names for classes and methods that are declared as abstract. \u201cMember\u201d is used in kind names for entities that can be class members (for example classes and methods). \u201cFinal\u201d is used in kind names for entities declared as final (non-extendable). \u201cStatic\u201d is used in kind names for entities declared as static. \u201cType\u201d is used in kind names for classes and interfaces. Table 1. Java entity kinds details Entity kind full name Description Example code snippet Java File A source file written in Java ( .java file ). File entity kinds do not have any parent. java SomeFile.java Java File Jar A source file from a jar file ( .jar ). java SomeJavaARchive.jar Java Method Constructor Member Visibility A constructor. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Constructor with Default visibility. java class some_class { some_class() { // constructor ... } Java Static Final Method Visibility Member A static final (non-extendable) method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Static Final Method Private Member. java private static final int some_meth() { ... } Java Static Final Generic Method Visibility Member Todo: Todo: Java Final Method Visibility Member A final (non-extendable) method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Final Method Private Member. java private final int some_meth() { ... } Java Generic Final Method Visibility Member A generic final (non-extendable) method. Todo: Java Final Generic Method Visibility Member Todo: Todo: Java Static Method Visibility Member A static method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Static Method Private Member. java private static int some_meth() { ... } Java Static Method Public Main Member A Java \u201cmain\u201d method. This is always public and static. For example, main method in the following example has a kind of Java Static Method Public Main Member. java public static main(String[] args) { ... } Java Method Visibility Member A method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Method Private Member. java private int some_meth() { ... } Java Abstract Method Visibility Member An abstract method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Abstract Method Protected Member. java protected abstract int some_meth(); Java Abstract Generic Method Visibility Member Todo: Todo: Java Unknown Method Member An unknown entity which from context can be identified as a method. Java Unresolved Method A method reference that was not linked up to a declaration in the resolve process. Should not occur. Java Unresolved External Static Final Method Visibility Member Java Unresolved External Final Method Visibility Member Java Unresolved External Static Method Visibility Member Java Module Todo: Todo: Java Unknown Module Todo: Todo: Java Unresolved Module Todo: Todo: Java Package A Java package. For example, some_pack in the following example has a kind of Java Package. Important note: The default unnamed package has a kind of Java Package Unnamed . An unnamed package entity is created if any files in the project do not have a \u201cpackage\u201d statement. Any class that appears in a file without a \u201cpackage\u201d statement belongs to the unnamed package. java package some_pack; Java Unknown Package An unknown entity which from context can be identified as a package. Java Unresolved Package Java Parameter A Java method parameter. For example, a_param in the following example has a kind of Java Parameter. java void some_meth(int a_param) { ... } Java Catch Parameter Parameter in a Java catch clause. For example, some_exception in the following example has a kind of Java Catch Parameter. java catch (some_exception e) { ... } Java Abstract Class Type Visibility Member An abstract class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Abstract Class Type Private Member. java private abstract class some_class { ... } Java Abstract Generic Class Type Visibility Member Java Static Abstract Class Type Visibility Member A static abstract class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Static Abstract Class Type Private Member. java private static abstract class some_class { ... } Java Static Abstract Generic Class Type Visibility Member Todo: Java Abstract Enum Type Visibility Member Todo: Java Annotation Interface Type Visibility Todo: Java Class Type Anonymous Member An anonymous class. A unique name of the form (Anon-1), (Anon-2), etc. is given to each anonymous class. For example: java some_class some_meth() { return new some_class() { // creates anonymous class ... } } Java Class Type Visibility Member A class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Class Type Public Member. java public class some_class { ... } Java Generic Class Type Visibility Member A generic class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Class Type Public Member. java public class<T> some_class { ... } Java Enum Class Type Visibility Member Todo: Todo: Java Final Class Type Visibility Member A final (non-extendable) class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Final Class Type Protected Member. java protected final class some_class { ... } Java Final Generic Class Type Visibility Member Todo: Java Static Class Type Visibility Member A static class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Static Class Type Private Member. java private static class some_class { ... } Java Static Final Class Type Visibility Member A static final class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Static Final Class Type Private Member. java private static final class some_class { ... } Java Static Generic Class Type Visibility Member Todo: Todo: Java Static Final Generic Class Type Visibility Member Todo: Todo: Java Generic Interface Type Visibility Todo: Todo: Java Unknown Class Type Member An unknown entity which from context can be identified as a class. Java Unresolved Type A type reference that was not linked up to a declaration in the resolve process. Should not occur. Java Static Final Variable Visibility Member A static final class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_constant in the following example has a kind of Java Static Final Variable Private Member. java class some_class { private static final int some_constant = 5; } Java Static Variable Visibility Member A static class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_constant in the following example has a kind of Java Static Variable Private Member. java class some_class { private static int some_constant = 5; } Java Final Variable Visibility Member A final class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_constant in the following example has a kind of Java Final Variable Private Member. java class some_class { private final int some_constant = 5; } Java Variable Visibility Member A class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_var in the following example has a kind of Java Variable Private Member. java class some_class { private int some_var = 5; } Java Variable Local A local variable. For example, some_var in the following example has a kind of Java Variable Local. java int some_meth() { int some_var = 5; } Java Final Variable Local A final local variable. For example, some_constant in the following example has a kind of Java Final Variable Local. java int some_meth() { final int some_constant = 5; } Java Implicit Final Variable Public Member Todo: Todo: Java Variable EnumConstant Public Member Todo: Todo: Java Unknown Variable Member An unknown entity which from context can be identified as a variable. Java Unresolved Variable A variable reference that was not linked up to a declaration in the resolve process. Should not occur. Java Unused An entity from the standard src.jar or rt.jar that is not used by or required by any files in the project. To filter out these entities, use \u201c~unused\u201d in queries to select Java entities. For example, udbKindParse(\u201cjava class ~unused\u201d) will select all classes that are part of the project or required by files in the project. References [1] SciTools, \u201cUnderstand,\u201d 2020. https://www.scitools.com/ (accessed Sep. 11, 2020).","title":"Entity kinds"},{"location":"entity_kinds/#entity-kinds","text":"This section explains the general categories of OpenUnderstand entity kinds for different programming languages.","title":"Entity kinds"},{"location":"entity_kinds/#java","text":"The total number of OpenUnderstand Java entity kinds is 169. Table 1 lists the general categories of Java entity kinds, the kind names, and the kind examples for use with Python. The Visibility term should be replaced with one concrete access modifier terms, including Default, Private, Protected, Public.","title":"Java"},{"location":"entity_kinds/#general-kind-keys","text":"\u201cDefault\u201d is used in kind names for entities with default visibility. \u201cPublic\u201d is used in kind names for entities declared as having public visibility. \u201cProtected\u201d is used in kind names for entities declared as having protected visibility. \u201cPrivate\u201d is used in kind names for entities declared as having private visibility. \u201cAbstract\" is used in kind names for classes and methods that are declared as abstract. \u201cMember\u201d is used in kind names for entities that can be class members (for example classes and methods). \u201cFinal\u201d is used in kind names for entities declared as final (non-extendable). \u201cStatic\u201d is used in kind names for entities declared as static. \u201cType\u201d is used in kind names for classes and interfaces. Table 1. Java entity kinds details Entity kind full name Description Example code snippet Java File A source file written in Java ( .java file ). File entity kinds do not have any parent. java SomeFile.java Java File Jar A source file from a jar file ( .jar ). java SomeJavaARchive.jar Java Method Constructor Member Visibility A constructor. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Constructor with Default visibility. java class some_class { some_class() { // constructor ... } Java Static Final Method Visibility Member A static final (non-extendable) method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Static Final Method Private Member. java private static final int some_meth() { ... } Java Static Final Generic Method Visibility Member Todo: Todo: Java Final Method Visibility Member A final (non-extendable) method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Final Method Private Member. java private final int some_meth() { ... } Java Generic Final Method Visibility Member A generic final (non-extendable) method. Todo: Java Final Generic Method Visibility Member Todo: Todo: Java Static Method Visibility Member A static method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Static Method Private Member. java private static int some_meth() { ... } Java Static Method Public Main Member A Java \u201cmain\u201d method. This is always public and static. For example, main method in the following example has a kind of Java Static Method Public Main Member. java public static main(String[] args) { ... } Java Method Visibility Member A method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Method Private Member. java private int some_meth() { ... } Java Abstract Method Visibility Member An abstract method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Abstract Method Protected Member. java protected abstract int some_meth(); Java Abstract Generic Method Visibility Member Todo: Todo: Java Unknown Method Member An unknown entity which from context can be identified as a method. Java Unresolved Method A method reference that was not linked up to a declaration in the resolve process. Should not occur. Java Unresolved External Static Final Method Visibility Member Java Unresolved External Final Method Visibility Member Java Unresolved External Static Method Visibility Member Java Module Todo: Todo: Java Unknown Module Todo: Todo: Java Unresolved Module Todo: Todo: Java Package A Java package. For example, some_pack in the following example has a kind of Java Package. Important note: The default unnamed package has a kind of Java Package Unnamed . An unnamed package entity is created if any files in the project do not have a \u201cpackage\u201d statement. Any class that appears in a file without a \u201cpackage\u201d statement belongs to the unnamed package. java package some_pack; Java Unknown Package An unknown entity which from context can be identified as a package. Java Unresolved Package Java Parameter A Java method parameter. For example, a_param in the following example has a kind of Java Parameter. java void some_meth(int a_param) { ... } Java Catch Parameter Parameter in a Java catch clause. For example, some_exception in the following example has a kind of Java Catch Parameter. java catch (some_exception e) { ... } Java Abstract Class Type Visibility Member An abstract class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Abstract Class Type Private Member. java private abstract class some_class { ... } Java Abstract Generic Class Type Visibility Member Java Static Abstract Class Type Visibility Member A static abstract class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Static Abstract Class Type Private Member. java private static abstract class some_class { ... } Java Static Abstract Generic Class Type Visibility Member Todo: Java Abstract Enum Type Visibility Member Todo: Java Annotation Interface Type Visibility Todo: Java Class Type Anonymous Member An anonymous class. A unique name of the form (Anon-1), (Anon-2), etc. is given to each anonymous class. For example: java some_class some_meth() { return new some_class() { // creates anonymous class ... } } Java Class Type Visibility Member A class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Class Type Public Member. java public class some_class { ... } Java Generic Class Type Visibility Member A generic class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Class Type Public Member. java public class<T> some_class { ... } Java Enum Class Type Visibility Member Todo: Todo: Java Final Class Type Visibility Member A final (non-extendable) class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Final Class Type Protected Member. java protected final class some_class { ... } Java Final Generic Class Type Visibility Member Todo: Java Static Class Type Visibility Member A static class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Static Class Type Private Member. java private static class some_class { ... } Java Static Final Class Type Visibility Member A static final class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Static Final Class Type Private Member. java private static final class some_class { ... } Java Static Generic Class Type Visibility Member Todo: Todo: Java Static Final Generic Class Type Visibility Member Todo: Todo: Java Generic Interface Type Visibility Todo: Todo: Java Unknown Class Type Member An unknown entity which from context can be identified as a class. Java Unresolved Type A type reference that was not linked up to a declaration in the resolve process. Should not occur. Java Static Final Variable Visibility Member A static final class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_constant in the following example has a kind of Java Static Final Variable Private Member. java class some_class { private static final int some_constant = 5; } Java Static Variable Visibility Member A static class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_constant in the following example has a kind of Java Static Variable Private Member. java class some_class { private static int some_constant = 5; } Java Final Variable Visibility Member A final class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_constant in the following example has a kind of Java Final Variable Private Member. java class some_class { private final int some_constant = 5; } Java Variable Visibility Member A class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_var in the following example has a kind of Java Variable Private Member. java class some_class { private int some_var = 5; } Java Variable Local A local variable. For example, some_var in the following example has a kind of Java Variable Local. java int some_meth() { int some_var = 5; } Java Final Variable Local A final local variable. For example, some_constant in the following example has a kind of Java Final Variable Local. java int some_meth() { final int some_constant = 5; } Java Implicit Final Variable Public Member Todo: Todo: Java Variable EnumConstant Public Member Todo: Todo: Java Unknown Variable Member An unknown entity which from context can be identified as a variable. Java Unresolved Variable A variable reference that was not linked up to a declaration in the resolve process. Should not occur. Java Unused An entity from the standard src.jar or rt.jar that is not used by or required by any files in the project. To filter out these entities, use \u201c~unused\u201d in queries to select Java entities. For example, udbKindParse(\u201cjava class ~unused\u201d) will select all classes that are part of the project or required by files in the project.","title":"General kind keys"},{"location":"entity_kinds/#references","text":"[1] SciTools, \u201cUnderstand,\u201d 2020. https://www.scitools.com/ (accessed Sep. 11, 2020).","title":"References"},{"location":"reference_kinds/","text":"Reference kinds The total number of Java references kinds is 34\u00d72=68. Table 2 lists the OpenUnderstand Java reference kinds, the kind names, and the kind examples for use with the Python API. Table 2. Java references kinds details Reference kind full name Description Example code snippet Java Call/Callby Indicates an invocation of a method. Call and Callby Java Call/Callby Nondynamic Indicates a non-dynamic invocation of a method. Java Call Nondynamic and Callby Nondynamic Java Cast/Castby Indicates a type is used to cast an instance to a different type. Java Cast and Castby Java Contain/Containin Indicates a class is in a package. Java Contain and Containin Java Couple/Coupleby Indicates a coupling link as counted in the OO coupling metrics. A link is created from a class to any external class (a class that is not in the extends/implements hierarchy) that is referenced. Java Couple and Coupleby Java Extend Couple/Coupleby Java Extend Couple/Coupleby External Java Extend Couple/Coupleby Implicit Java Extend Couple/Coupleby Implicit External Indicates one class or interface extends another. This extends relation is used when the extended class is in a file that is part of the project. If the extended class was found in a classpath .jar file, the relation is Java Extend Couple External. If the Indicates class implicitly extends the java.lang.Object class, the relation is Java Extend Couple Implicit. Java Extend Couple and Extendby Coupleby Java Implement Couple/Coupleby Indicates a class implements an interface. Java Implement Couple and Implementby Coupleby Java Create/Createby Indicates that an instance of a class is created (\u201cnew\u201d operator) in a scope. Java Create and Createby Java Declare/Declarein Todo: Java Declare and Declarein Java Define/Definein Indicates that an entity is defined in a scope. Java Define and Definein Java Define/Definein Implicit Todo: Java Define and Definein Implicit Java DotRef/DotRefby Indicates that an entity name was used to the left of a \u201c.\u201d in a qualified name. Java DotRef and DotRefby Java Export/Exportby Todo: Java Export and Exportby Java Import/Importby Java Import/Importby Demand Java Import indicates a file imports an individual class. For example, the some_file.java file might contain: import pack1.some_class; Java Import Demand indicates a file has an on-demand import statement for a package or class. For example, the some_file.java file might contain: import pack1.*; Java Import and Importby Java Modify/Modifyby Indicates that a variable\u2019s value is modified or both read and set, as with the increment (++), decrement (--), and assignment/operator combinations (*=, /=, ...). Java Modify and Modifyby Java ModuleUse/ModuleUseby Todo: Java ModuleUse and ModuleUseby Java Override/Overrideby Indicates that a method overrides a method from a parent class. Java Override and Overrideby Java Provide/Provideby Todo: Java Provide and Provideby Java Require/Requireby Todo: Java Require and Requireby Java Set/Setby Java Set indicates that a variable is set by a separate statement. Java Set and Setby Java Set/Setby Init Java Set Init indicates that a variable is initialized in its declaration. Java Set Init and Setby Init Java Set/Setby Partial Todo: Java Set Partial and Setby Partial Java Typed/Typedby Indicates the type of a variable or parameter. Java Typed and Typedby Java Use/Useby Indicates that a variable is used or read. Java Use and Useby Java Use/Useby Partial Todo: Java Use Partial and Useby Partial Java Use/Useby Ptr Todo: Java Use Ptr and Useby Ptr Java Use/Useby Return Todo: Java Use Return and Useby Return Java Open/Openby Todo: Java Open and Openby Java Throw/Throwby Indicates that a method throws an exception. Java Throw and Throwby Java End Indicates the end of a class, interface, or method. Java End and Endby Reference kind examples This section describes the example in Table 2 with more details. Call and Callby Indicates an invocation of a method. class class1 { void meth1() { ... } } class class2 { class1 some_obj; void meth2() { some_obj.meth1(); } } Reference kind string Entity performing references Entity being referenced Java Call meth2 meth1 Java Callby meth1 meth2 Java Call Nondynamic and Callby Nondynamic Indicates a non-dynamic invocation of a method. class class1 { void meth1() { ... } } class class2 extends class1 { class1 some_obj; void meth1() { super.meth1(); } } Reference kind string Entity performing references Entity being referenced Java Call Nondynamic class2.meth1 class1.meth1 Java Callby Nondynamic class1.meth1 class2.meth1 Java Cast and Castby Indicates a type is used to cast an instance to a different type. class c1 { ... } class c2 extends c1 { ... } class c3 { c2 b = new c2(); c1 a = (c1) b; } Reference kind string Entity performing references Entity being referenced Java Cast c3 c1 Java Castby c1 c3 References [1] SciTools, \u201cUnderstand,\u201d 2020. https://www.scitools.com/ (accessed Sep. 11, 2020).","title":"References kinds"},{"location":"reference_kinds/#reference-kinds","text":"The total number of Java references kinds is 34\u00d72=68. Table 2 lists the OpenUnderstand Java reference kinds, the kind names, and the kind examples for use with the Python API. Table 2. Java references kinds details Reference kind full name Description Example code snippet Java Call/Callby Indicates an invocation of a method. Call and Callby Java Call/Callby Nondynamic Indicates a non-dynamic invocation of a method. Java Call Nondynamic and Callby Nondynamic Java Cast/Castby Indicates a type is used to cast an instance to a different type. Java Cast and Castby Java Contain/Containin Indicates a class is in a package. Java Contain and Containin Java Couple/Coupleby Indicates a coupling link as counted in the OO coupling metrics. A link is created from a class to any external class (a class that is not in the extends/implements hierarchy) that is referenced. Java Couple and Coupleby Java Extend Couple/Coupleby Java Extend Couple/Coupleby External Java Extend Couple/Coupleby Implicit Java Extend Couple/Coupleby Implicit External Indicates one class or interface extends another. This extends relation is used when the extended class is in a file that is part of the project. If the extended class was found in a classpath .jar file, the relation is Java Extend Couple External. If the Indicates class implicitly extends the java.lang.Object class, the relation is Java Extend Couple Implicit. Java Extend Couple and Extendby Coupleby Java Implement Couple/Coupleby Indicates a class implements an interface. Java Implement Couple and Implementby Coupleby Java Create/Createby Indicates that an instance of a class is created (\u201cnew\u201d operator) in a scope. Java Create and Createby Java Declare/Declarein Todo: Java Declare and Declarein Java Define/Definein Indicates that an entity is defined in a scope. Java Define and Definein Java Define/Definein Implicit Todo: Java Define and Definein Implicit Java DotRef/DotRefby Indicates that an entity name was used to the left of a \u201c.\u201d in a qualified name. Java DotRef and DotRefby Java Export/Exportby Todo: Java Export and Exportby Java Import/Importby Java Import/Importby Demand Java Import indicates a file imports an individual class. For example, the some_file.java file might contain: import pack1.some_class; Java Import Demand indicates a file has an on-demand import statement for a package or class. For example, the some_file.java file might contain: import pack1.*; Java Import and Importby Java Modify/Modifyby Indicates that a variable\u2019s value is modified or both read and set, as with the increment (++), decrement (--), and assignment/operator combinations (*=, /=, ...). Java Modify and Modifyby Java ModuleUse/ModuleUseby Todo: Java ModuleUse and ModuleUseby Java Override/Overrideby Indicates that a method overrides a method from a parent class. Java Override and Overrideby Java Provide/Provideby Todo: Java Provide and Provideby Java Require/Requireby Todo: Java Require and Requireby Java Set/Setby Java Set indicates that a variable is set by a separate statement. Java Set and Setby Java Set/Setby Init Java Set Init indicates that a variable is initialized in its declaration. Java Set Init and Setby Init Java Set/Setby Partial Todo: Java Set Partial and Setby Partial Java Typed/Typedby Indicates the type of a variable or parameter. Java Typed and Typedby Java Use/Useby Indicates that a variable is used or read. Java Use and Useby Java Use/Useby Partial Todo: Java Use Partial and Useby Partial Java Use/Useby Ptr Todo: Java Use Ptr and Useby Ptr Java Use/Useby Return Todo: Java Use Return and Useby Return Java Open/Openby Todo: Java Open and Openby Java Throw/Throwby Indicates that a method throws an exception. Java Throw and Throwby Java End Indicates the end of a class, interface, or method. Java End and Endby","title":"Reference kinds"},{"location":"reference_kinds/#reference-kind-examples","text":"This section describes the example in Table 2 with more details.","title":"Reference kind examples"},{"location":"reference_kinds/#call-and-callby","text":"Indicates an invocation of a method. class class1 { void meth1() { ... } } class class2 { class1 some_obj; void meth2() { some_obj.meth1(); } } Reference kind string Entity performing references Entity being referenced Java Call meth2 meth1 Java Callby meth1 meth2","title":"Call and Callby"},{"location":"reference_kinds/#java-call-nondynamic-and-callby-nondynamic","text":"Indicates a non-dynamic invocation of a method. class class1 { void meth1() { ... } } class class2 extends class1 { class1 some_obj; void meth1() { super.meth1(); } } Reference kind string Entity performing references Entity being referenced Java Call Nondynamic class2.meth1 class1.meth1 Java Callby Nondynamic class1.meth1 class2.meth1","title":"Java Call Nondynamic and Callby Nondynamic"},{"location":"reference_kinds/#java-cast-and-castby","text":"Indicates a type is used to cast an instance to a different type. class c1 { ... } class c2 extends c1 { ... } class c3 { c2 b = new c2(); c1 a = (c1) b; } Reference kind string Entity performing references Entity being referenced Java Cast c3 c1 Java Castby c1 c3","title":"Java Cast and Castby"},{"location":"reference_kinds/#references","text":"[1] SciTools, \u201cUnderstand,\u201d 2020. https://www.scitools.com/ (accessed Sep. 11, 2020).","title":"References"},{"location":"proposals/core_code_graphs_development/","text":"","title":"Core code graphs and visualiztion development"},{"location":"proposals/core_entity_reference_development/","text":"Core entity-reference development","title":"Core entity-reference development"},{"location":"proposals/core_entity_reference_development/#core-entity-reference-development","text":"","title":"Core entity-reference development"},{"location":"proposals/core_source_code_metrics_development/","text":"Core source code metrics development To be announced.","title":"Core source code metrics development"},{"location":"proposals/core_source_code_metrics_development/#core-source-code-metrics-development","text":"To be announced.","title":"Core source code metrics development"}]}