{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to OpenUnderstand An open-source implementation of Understand Python API. Visit source code . Introduction Understand [1] has an extensive API to let developers query the data it captures about their code. It has three flavors: Perl, Python, and C. We work with Python API. All three implementations of the Understand APIs are read-only. They do not modify the Understand project information. If there is a need to modify Understand project information programmatically, the 'und' tool must be used. Unfortunately, the Understand API source code is not publicly available, making it difficult to change, customize, and reuse in new activities and environments which appears in academic researches. This project aims to provide an open-source implementation of the Understand Python API to analyze the source codes. We primarily focus on implementing the API for Java programs using Python programming languages and compiler tools such as ANTLR [2]. To develop an open-source implementation of Understand Python API, we look at the structures used by Understand for analyzing source codes. Project layout Entity and reference Most of the data captured by Understand involves Entities and References. Entity: An Entity is anything in the code that Understand captures information on: i.e., A file, a class, a variable, a function, etc. In the Perl API, Entities are represented with the Understand::Ent class. In Python, it is the Understand.Ent class. Reference: A specific place where an entity appears in the code. A reference is always defined as a relationship between two entities. e.g., function Bar is called on line 14 of function Foo. In the Perl API, References are represented with the Understand::Ref class. In Python, it is the Understand.Ref class. Every entity and reference have a unique set of attributes that can be queried by the API. A few of the attributes you can view for an entity would be its name, its type, any associated comments, what kind of entity it is, and if it has them: its parent entity and its parameters. On the other hand, a reference would have both of the entities associated with it as well as the file, line, and column where the reference occurs and what kind of reference it is. To help visualize this, let's use this simple C code: myFile.c void main(){ char myString[]; myString = \u201cHello World!\u201d; } Understand would identify three entities (blue) and three references (green), shown in Figure 1. Figure 1. Understand data structure for a simple C code Since all references are relationships between two objects, the references are actually stored going in both directions. Hence, each reference kind has an opposite: \"Define\" and \"DefineIn\", \"Set\" and \"SetBy\", \"Call\" and \"Callby\", etc. The same entities of Figure 1 with their reverse references are shown in Figure 2. Figure 2. References of Figure 1 in inverse directions Entity kinds A comprehensive list of OpenUnderstand entity kinds for Java programming language can be found on Entity kind page Reference kind A comprehensive list of OpenUnderstand reference kinds for Java programming language can be found on Reference kind page Architecture This section briefly describes the OpneUndertsand architecture. Database schema ERD For the database section of this project, peewee library and SQLite3 are used. It is essential to read the peewee's documents as well. The entity-relationship diagram (ERD) for the designed database for OpneUnderstand symbol table is shown in Figure 3. There are four important tables in OpenUnderstand database, created for each project during static analysis: Project: For storing some basic information about the project under analysis such as project name, programming languages, etc. This table fills automatically. Kind: For storing both the entity and reference kinds which are separable by is_ent_kind boolean. This table fills automatically. Entity: For storing Java entities in the project. This table fills during the program static analysis by ANTLR listeners . Reference: For storing Java references in the project. This table fills during the program static analysis by ANTLR listeners . Figure 3. OpenUnderstand database schema ERD Some architectural notes Multiple analysis passes are required to capture all entities and references kinds OpenUnderstand analysis project files in at least two passes. File is the root since the parent of files is None. Parent of a package is its first file according to alphabetical sort of all files in the package. Parent of other entities is their definition place. Only variables have value. Classes that are not in project are Unknown. API There is a designed and read-to-use API in db/api.py for querying the database and checking the results with Understand. The API is exactly the same as Understand's API to be compatible with Understand tool. Initializing the database from openunderstand.oudb.api import create_db from openunderstand.oudb.fill import main create_db( dbname=\"G:\\Dev\\OpenUnderstand\\database.oudb\", # customize the path project_dir=\"G:\\Dev\\OpenUnderstand\\benchmark\\calculator_app\" # customize the path ) main() Filling OpenUnderstand tables It is essential to check whether a reference or entity kinds have already been inserted into the database or not, before any insert operation. Any duplicated entity or reference should be avoided. To this aim, we provide the following get and create methods. Get or create an instance: obj, has_created = ModelName.get_or_create(**fields) Get or none : obj = ModelName.get_or_none(**fields) To find more information about CRUD operations check out the peewee's documents . Using the API from openunderstand.oudb.api import open as db_open db = db_open(\"G:\\Dev\\OpenUnderstand\\database.oudb\") # customize the path ent = db.lookup(\"Admin\", \"method\")[0] print(ent, ent.kind()) print(ent, ent.simplename()) for ref in ent.refs(entkindstring=\"method\"): print(ref) # The results should be exactly similar to Understand. API tests To facilitate the verification process OpenUnderstand uses a set of unit tests for each entity and reference kinds. The unit test mainly used the benchmark projects . Tests oracles are generated by Understand v6.0 automatically. Current development proposal Our current development proposal is Core entity-reference development which is available on development proposals section . FAQs If you have any further questions, or you are interested to be a core developer do not hesitate to contact us. You can send an e-mail to m-zakeri@live.com with the subject \"OpenUnderstand\". References [1] SciTools, \u201cUnderstand,\u201d 2020. https://www.scitools.com/ (accessed Sep. 11, 2020). [2] T. Parr and K. Fisher, \u201cLL(*): the foundation of the ANTLR parser generator,\u201d Proc. 32nd ACM SIGPLAN Conf. Program. Lang. Des. Implement., pp. 425\u2013436, 2011, doi: http://doi.acm.org/10.1145/1993498.1993548.","title":"Home"},{"location":"#welcome-to-openunderstand","text":"An open-source implementation of Understand Python API. Visit source code .","title":"Welcome to OpenUnderstand"},{"location":"#introduction","text":"Understand [1] has an extensive API to let developers query the data it captures about their code. It has three flavors: Perl, Python, and C. We work with Python API. All three implementations of the Understand APIs are read-only. They do not modify the Understand project information. If there is a need to modify Understand project information programmatically, the 'und' tool must be used. Unfortunately, the Understand API source code is not publicly available, making it difficult to change, customize, and reuse in new activities and environments which appears in academic researches. This project aims to provide an open-source implementation of the Understand Python API to analyze the source codes. We primarily focus on implementing the API for Java programs using Python programming languages and compiler tools such as ANTLR [2]. To develop an open-source implementation of Understand Python API, we look at the structures used by Understand for analyzing source codes.","title":"Introduction"},{"location":"#project-layout","text":"","title":"Project layout"},{"location":"#entity-and-reference","text":"Most of the data captured by Understand involves Entities and References. Entity: An Entity is anything in the code that Understand captures information on: i.e., A file, a class, a variable, a function, etc. In the Perl API, Entities are represented with the Understand::Ent class. In Python, it is the Understand.Ent class. Reference: A specific place where an entity appears in the code. A reference is always defined as a relationship between two entities. e.g., function Bar is called on line 14 of function Foo. In the Perl API, References are represented with the Understand::Ref class. In Python, it is the Understand.Ref class. Every entity and reference have a unique set of attributes that can be queried by the API. A few of the attributes you can view for an entity would be its name, its type, any associated comments, what kind of entity it is, and if it has them: its parent entity and its parameters. On the other hand, a reference would have both of the entities associated with it as well as the file, line, and column where the reference occurs and what kind of reference it is. To help visualize this, let's use this simple C code: myFile.c void main(){ char myString[]; myString = \u201cHello World!\u201d; } Understand would identify three entities (blue) and three references (green), shown in Figure 1. Figure 1. Understand data structure for a simple C code Since all references are relationships between two objects, the references are actually stored going in both directions. Hence, each reference kind has an opposite: \"Define\" and \"DefineIn\", \"Set\" and \"SetBy\", \"Call\" and \"Callby\", etc. The same entities of Figure 1 with their reverse references are shown in Figure 2. Figure 2. References of Figure 1 in inverse directions","title":"Entity and reference"},{"location":"#entity-kinds","text":"A comprehensive list of OpenUnderstand entity kinds for Java programming language can be found on Entity kind page","title":"Entity kinds"},{"location":"#reference-kind","text":"A comprehensive list of OpenUnderstand reference kinds for Java programming language can be found on Reference kind page","title":"Reference kind"},{"location":"#architecture","text":"This section briefly describes the OpneUndertsand architecture.","title":"Architecture"},{"location":"#database-schema-erd","text":"For the database section of this project, peewee library and SQLite3 are used. It is essential to read the peewee's documents as well. The entity-relationship diagram (ERD) for the designed database for OpneUnderstand symbol table is shown in Figure 3. There are four important tables in OpenUnderstand database, created for each project during static analysis: Project: For storing some basic information about the project under analysis such as project name, programming languages, etc. This table fills automatically. Kind: For storing both the entity and reference kinds which are separable by is_ent_kind boolean. This table fills automatically. Entity: For storing Java entities in the project. This table fills during the program static analysis by ANTLR listeners . Reference: For storing Java references in the project. This table fills during the program static analysis by ANTLR listeners . Figure 3. OpenUnderstand database schema ERD","title":"Database schema ERD"},{"location":"#some-architectural-notes","text":"Multiple analysis passes are required to capture all entities and references kinds OpenUnderstand analysis project files in at least two passes. File is the root since the parent of files is None. Parent of a package is its first file according to alphabetical sort of all files in the package. Parent of other entities is their definition place. Only variables have value. Classes that are not in project are Unknown.","title":"Some architectural notes"},{"location":"#api","text":"There is a designed and read-to-use API in db/api.py for querying the database and checking the results with Understand. The API is exactly the same as Understand's API to be compatible with Understand tool.","title":"API"},{"location":"#initializing-the-database","text":"from openunderstand.oudb.api import create_db from openunderstand.oudb.fill import main create_db( dbname=\"G:\\Dev\\OpenUnderstand\\database.oudb\", # customize the path project_dir=\"G:\\Dev\\OpenUnderstand\\benchmark\\calculator_app\" # customize the path ) main()","title":"Initializing the database"},{"location":"#filling-openunderstand-tables","text":"It is essential to check whether a reference or entity kinds have already been inserted into the database or not, before any insert operation. Any duplicated entity or reference should be avoided. To this aim, we provide the following get and create methods. Get or create an instance: obj, has_created = ModelName.get_or_create(**fields) Get or none : obj = ModelName.get_or_none(**fields) To find more information about CRUD operations check out the peewee's documents .","title":"Filling OpenUnderstand tables"},{"location":"#using-the-api","text":"from openunderstand.oudb.api import open as db_open db = db_open(\"G:\\Dev\\OpenUnderstand\\database.oudb\") # customize the path ent = db.lookup(\"Admin\", \"method\")[0] print(ent, ent.kind()) print(ent, ent.simplename()) for ref in ent.refs(entkindstring=\"method\"): print(ref) # The results should be exactly similar to Understand.","title":"Using the API"},{"location":"#api-tests","text":"To facilitate the verification process OpenUnderstand uses a set of unit tests for each entity and reference kinds. The unit test mainly used the benchmark projects . Tests oracles are generated by Understand v6.0 automatically.","title":"API tests"},{"location":"#current-development-proposal","text":"Our current development proposal is Core entity-reference development which is available on development proposals section .","title":"Current development proposal"},{"location":"#faqs","text":"If you have any further questions, or you are interested to be a core developer do not hesitate to contact us. You can send an e-mail to m-zakeri@live.com with the subject \"OpenUnderstand\".","title":"FAQs"},{"location":"#references","text":"[1] SciTools, \u201cUnderstand,\u201d 2020. https://www.scitools.com/ (accessed Sep. 11, 2020). [2] T. Parr and K. Fisher, \u201cLL(*): the foundation of the ANTLR parser generator,\u201d Proc. 32nd ACM SIGPLAN Conf. Program. Lang. Des. Implement., pp. 425\u2013436, 2011, doi: http://doi.acm.org/10.1145/1993498.1993548.","title":"References"},{"location":"benchmarks/","text":"Benchmark projects All OpenUnderstand features are evaluated with real-world Java projects. A set of nine Java projects in different scales (small, moderate, and large size) are available at the benchmark directory of the OpenUnderstand repository. To test your module with one of the benchmark projects, first, unzip it and then use it in your testbed. Please do not add/commit any unzipped file to the benchmark directory. The description of these projects are available on CodART benchmark projects .","title":"Benchmarks"},{"location":"benchmarks/#benchmark-projects","text":"All OpenUnderstand features are evaluated with real-world Java projects. A set of nine Java projects in different scales (small, moderate, and large size) are available at the benchmark directory of the OpenUnderstand repository. To test your module with one of the benchmark projects, first, unzip it and then use it in your testbed. Please do not add/commit any unzipped file to the benchmark directory. The description of these projects are available on CodART benchmark projects .","title":"Benchmark projects"},{"location":"entity_kinds/","text":"Entity kinds This section explains the general categories of OpenUnderstand entity kinds for different programming languages. Java The total number of OpenUnderstand Java entity kinds is 169. Table 1 lists the general categories of Java entity kinds, the kind names, and the kind examples for use with Python. The Visibility term should be replaced with one concrete access modifier terms, including Default, Private, Protected, Public. General kind keys \u201cDefault\u201d is used in kind names for entities with default visibility. \u201cPublic\u201d is used in kind names for entities declared as having public visibility. \u201cProtected\u201d is used in kind names for entities declared as having protected visibility. \u201cPrivate\u201d is used in kind names for entities declared as having private visibility. \u201cAbstract\" is used in kind names for classes and methods that are declared as abstract. \u201cMember\u201d is used in kind names for entities that can be class members (for example classes and methods). \u201cFinal\u201d is used in kind names for entities declared as final (non-extendable). \u201cStatic\u201d is used in kind names for entities declared as static. \u201cType\u201d is used in kind names for classes and interfaces. Table 1. Java entity kinds details Entity kind full name Description Example code snippet Java File A source file written in Java ( .java file). File entity kinds do not have any parent. SomeFile.java Java File Jar A source file from a Java ARchive file ( .jar File). SomeJavaARchive.jar Java Method Constructor Member Visibility A constructor. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Constructor with Default visibility. class some_class { some_class() { // constructor ... } Java Static Final Method Visibility Member A static final (non-extendable) method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Static Final Method Private Member. private static final int some_meth() { ... } Java Static Final Generic Method Visibility Member Todo: Todo: Java Final Method Visibility Member A final (non-extendable) method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Final Method Private Member. private final int some_meth() { ... } Java Generic Final Method Visibility Member A generic final (non-extendable) method. Todo: Java Final Generic Method Visibility Member Todo: Todo: Java Static Method Visibility Member A static method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Static Method Private Member. private static int some_meth() { ... } Java Static Method Public Main Member A Java \u201cmain\u201d method. This is always public and static. For example, main method in the following example has a kind of Java Static Method Public Main Member. public static main(String[] args) { ... } Java Method Visibility Member A method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Method Private Member. private int some_meth() { ... } Java Abstract Method Visibility Member An abstract method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Abstract Method Protected Member. protected abstract int some_meth(); Java Abstract Generic Method Visibility Member Todo: Todo: Java Unknown Method Member An unknown entity which from context can be identified as a method. Java Unresolved Method A method reference that was not linked up to a declaration in the resolve process. Should not occur. Java Unresolved External Static Final Method Visibility Member Todo: Java Unresolved External Final Method Visibility Member Java Unresolved External Static Method Visibility Member Java Module Todo: Todo: Java Unknown Module Todo: Todo: Java Unresolved Module Todo: Todo: Java Package A Java package. For example, some_pack in the following example has a kind of Java Package. Important note: The default unnamed package has a kind of Java Package Unnamed . An unnamed package entity is created if any files in the project do not have a \u201cpackage\u201d statement. Any class that appears in a file without a \u201cpackage\u201d statement belongs to the unnamed package. package some_pack; Java Unknown Package An unknown entity which from context can be identified as a package. Java Unresolved Package Java Parameter A Java method parameter. For example, a_param in the following example has a kind of Java Parameter. void some_meth(int a_param) { ... } Java Catch Parameter Parameter in a Java catch clause. For example, some_exception in the following example has a kind of Java Catch Parameter. catch (some_exception e) { ... } Java Abstract Class Type Visibility Member An abstract class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Abstract Class Type Private Member. private abstract class some_class { ... } Java Abstract Generic Class Type Visibility Member Java Static Abstract Class Type Visibility Member A static abstract class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Static Abstract Class Type Private Member. private static abstract class some_class { ... } Java Static Abstract Generic Class Type Visibility Member Todo: Java Abstract Enum Type Visibility Member Todo: Java Annotation Interface Type Visibility Todo: Java Class Type Anonymous Member An anonymous class. A unique name of the form (Anon-1), (Anon-2), etc. is given to each anonymous class. For example: some_class some_meth() { return new some_class() { // creates anonymous class ... } } Java Class Type Visibility Member A class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Class Type Public Member. public class some_class { ... } Java Generic Class Type Visibility Member A generic class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Class Type Public Member. public class<T> some_class { ... } Java Enum Class Type Visibility Member Todo: Todo: Java Final Class Type Visibility Member A final (non-extendable) class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Final Class Type Protected Member. protected final class some_class { ... } Java Final Generic Class Type Visibility Member Todo: Java Static Class Type Visibility Member A static class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Static Class Type Private Member. private static class some_class { ... } Java Static Final Class Type Visibility Member A static final class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Static Final Class Type Private Member. private static final class some_class { ... } Java Static Generic Class Type Visibility Member Todo: Todo: Java Static Final Generic Class Type Visibility Member Todo: Todo: Java Generic Interface Type Visibility Todo: Todo: Java Unknown Class Type Member An unknown entity which from context can be identified as a class. Java Unresolved Type A type reference that was not linked up to a declaration in the resolve process. Should not occur. Java Static Final Variable Visibility Member A static final class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_constant in the following example has a kind of Java Static Final Variable Private Member. class some_class { private static final int some_constant = 5; } Java Static Variable Visibility Member A static class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_constant in the following example has a kind of Java Static Variable Private Member. class some_class { private static int some_constant = 5; } Java Final Variable Visibility Member A final class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_constant in the following example has a kind of Java Final Variable Private Member. class some_class { private final int some_constant = 5; } Java Variable Visibility Member A class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_var in the following example has a kind of Java Variable Private Member. class some_class { private int some_var = 5; } Java Variable Local A local variable. For example, some_var in the following example has a kind of Java Variable Local. int some_meth() { int some_var = 5; } Java Final Variable Local A final local variable. For example, some_constant in the following example has a kind of Java Final Variable Local. int some_meth() { final int some_constant = 5; } Java Implicit Final Variable Public Member Todo: Todo: Java Variable EnumConstant Public Member Todo: Todo: Java Unknown Variable Member An unknown entity which from context can be identified as a variable. Java Unresolved Variable A variable reference that was not linked up to a declaration in the resolve process. Should not occur. Java Unused An entity from the standard src.jar or rt.jar that is not used by or required by any files in the project. To filter out these entities, use \u201c~unused\u201d in queries to select Java entities. For example, udbKindParse(\u201cjava class ~unused\u201d) will select all classes that are part of the project or required by files in the project. References [1] SciTools, \u201cUnderstand,\u201d 2020. https://www.scitools.com/ (accessed Sep. 11, 2020).","title":"Entity kinds"},{"location":"entity_kinds/#entity-kinds","text":"This section explains the general categories of OpenUnderstand entity kinds for different programming languages.","title":"Entity kinds"},{"location":"entity_kinds/#java","text":"The total number of OpenUnderstand Java entity kinds is 169. Table 1 lists the general categories of Java entity kinds, the kind names, and the kind examples for use with Python. The Visibility term should be replaced with one concrete access modifier terms, including Default, Private, Protected, Public.","title":"Java"},{"location":"entity_kinds/#general-kind-keys","text":"\u201cDefault\u201d is used in kind names for entities with default visibility. \u201cPublic\u201d is used in kind names for entities declared as having public visibility. \u201cProtected\u201d is used in kind names for entities declared as having protected visibility. \u201cPrivate\u201d is used in kind names for entities declared as having private visibility. \u201cAbstract\" is used in kind names for classes and methods that are declared as abstract. \u201cMember\u201d is used in kind names for entities that can be class members (for example classes and methods). \u201cFinal\u201d is used in kind names for entities declared as final (non-extendable). \u201cStatic\u201d is used in kind names for entities declared as static. \u201cType\u201d is used in kind names for classes and interfaces. Table 1. Java entity kinds details Entity kind full name Description Example code snippet Java File A source file written in Java ( .java file). File entity kinds do not have any parent. SomeFile.java Java File Jar A source file from a Java ARchive file ( .jar File). SomeJavaARchive.jar Java Method Constructor Member Visibility A constructor. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Constructor with Default visibility. class some_class { some_class() { // constructor ... } Java Static Final Method Visibility Member A static final (non-extendable) method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Static Final Method Private Member. private static final int some_meth() { ... } Java Static Final Generic Method Visibility Member Todo: Todo: Java Final Method Visibility Member A final (non-extendable) method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Final Method Private Member. private final int some_meth() { ... } Java Generic Final Method Visibility Member A generic final (non-extendable) method. Todo: Java Final Generic Method Visibility Member Todo: Todo: Java Static Method Visibility Member A static method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Static Method Private Member. private static int some_meth() { ... } Java Static Method Public Main Member A Java \u201cmain\u201d method. This is always public and static. For example, main method in the following example has a kind of Java Static Method Public Main Member. public static main(String[] args) { ... } Java Method Visibility Member A method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Method Private Member. private int some_meth() { ... } Java Abstract Method Visibility Member An abstract method. Visibility may be Default, Public, Protected, or Private. For example, some_meth in the following example has a kind of Java Abstract Method Protected Member. protected abstract int some_meth(); Java Abstract Generic Method Visibility Member Todo: Todo: Java Unknown Method Member An unknown entity which from context can be identified as a method. Java Unresolved Method A method reference that was not linked up to a declaration in the resolve process. Should not occur. Java Unresolved External Static Final Method Visibility Member Todo: Java Unresolved External Final Method Visibility Member Java Unresolved External Static Method Visibility Member Java Module Todo: Todo: Java Unknown Module Todo: Todo: Java Unresolved Module Todo: Todo: Java Package A Java package. For example, some_pack in the following example has a kind of Java Package. Important note: The default unnamed package has a kind of Java Package Unnamed . An unnamed package entity is created if any files in the project do not have a \u201cpackage\u201d statement. Any class that appears in a file without a \u201cpackage\u201d statement belongs to the unnamed package. package some_pack; Java Unknown Package An unknown entity which from context can be identified as a package. Java Unresolved Package Java Parameter A Java method parameter. For example, a_param in the following example has a kind of Java Parameter. void some_meth(int a_param) { ... } Java Catch Parameter Parameter in a Java catch clause. For example, some_exception in the following example has a kind of Java Catch Parameter. catch (some_exception e) { ... } Java Abstract Class Type Visibility Member An abstract class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Abstract Class Type Private Member. private abstract class some_class { ... } Java Abstract Generic Class Type Visibility Member Java Static Abstract Class Type Visibility Member A static abstract class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Static Abstract Class Type Private Member. private static abstract class some_class { ... } Java Static Abstract Generic Class Type Visibility Member Todo: Java Abstract Enum Type Visibility Member Todo: Java Annotation Interface Type Visibility Todo: Java Class Type Anonymous Member An anonymous class. A unique name of the form (Anon-1), (Anon-2), etc. is given to each anonymous class. For example: some_class some_meth() { return new some_class() { // creates anonymous class ... } } Java Class Type Visibility Member A class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Class Type Public Member. public class some_class { ... } Java Generic Class Type Visibility Member A generic class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Class Type Public Member. public class<T> some_class { ... } Java Enum Class Type Visibility Member Todo: Todo: Java Final Class Type Visibility Member A final (non-extendable) class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Final Class Type Protected Member. protected final class some_class { ... } Java Final Generic Class Type Visibility Member Todo: Java Static Class Type Visibility Member A static class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Static Class Type Private Member. private static class some_class { ... } Java Static Final Class Type Visibility Member A static final class. Visibility may be Default, Public, Protected, or Private. For example, some_class in the following example has a kind of Java Static Final Class Type Private Member. private static final class some_class { ... } Java Static Generic Class Type Visibility Member Todo: Todo: Java Static Final Generic Class Type Visibility Member Todo: Todo: Java Generic Interface Type Visibility Todo: Todo: Java Unknown Class Type Member An unknown entity which from context can be identified as a class. Java Unresolved Type A type reference that was not linked up to a declaration in the resolve process. Should not occur. Java Static Final Variable Visibility Member A static final class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_constant in the following example has a kind of Java Static Final Variable Private Member. class some_class { private static final int some_constant = 5; } Java Static Variable Visibility Member A static class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_constant in the following example has a kind of Java Static Variable Private Member. class some_class { private static int some_constant = 5; } Java Final Variable Visibility Member A final class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_constant in the following example has a kind of Java Final Variable Private Member. class some_class { private final int some_constant = 5; } Java Variable Visibility Member A class member variable (field). Visibility may be Default, Public, Protected, or Private. For example, some_var in the following example has a kind of Java Variable Private Member. class some_class { private int some_var = 5; } Java Variable Local A local variable. For example, some_var in the following example has a kind of Java Variable Local. int some_meth() { int some_var = 5; } Java Final Variable Local A final local variable. For example, some_constant in the following example has a kind of Java Final Variable Local. int some_meth() { final int some_constant = 5; } Java Implicit Final Variable Public Member Todo: Todo: Java Variable EnumConstant Public Member Todo: Todo: Java Unknown Variable Member An unknown entity which from context can be identified as a variable. Java Unresolved Variable A variable reference that was not linked up to a declaration in the resolve process. Should not occur. Java Unused An entity from the standard src.jar or rt.jar that is not used by or required by any files in the project. To filter out these entities, use \u201c~unused\u201d in queries to select Java entities. For example, udbKindParse(\u201cjava class ~unused\u201d) will select all classes that are part of the project or required by files in the project.","title":"General kind keys"},{"location":"entity_kinds/#references","text":"[1] SciTools, \u201cUnderstand,\u201d 2020. https://www.scitools.com/ (accessed Sep. 11, 2020).","title":"References"},{"location":"reference_kinds/","text":"Reference kinds The total number of Java references kinds is 34\u00d72=68. Table 2 lists the OpenUnderstand Java reference kinds, the kind names, and the kind examples for use with the Python API. Table 2. Java references kinds details Reference kind full name Description Example code snippet Java Call/Callby Indicates an invocation of a method. Call and Callby Java Call/Callby Nondynamic Indicates a non-dynamic invocation of a method. Java Call Nondynamic and Callby Nondynamic Java Cast/Castby Indicates a type is used to cast an instance to a different type. Java Cast and Castby Java Contain/Containin Indicates a class is in a package. Java Contain and Containin Java Couple/Coupleby Indicates a coupling link as counted in the OO coupling metrics. A link is created from a class to any external class (a class that is not in the extends/implements hierarchy) that is referenced. Java Couple and Coupleby Java Extend Couple/Coupleby Java Extend Couple/Coupleby External Java Extend Couple/Coupleby Implicit Java Extend Couple/Coupleby Implicit External Indicates one class or interface extends another. This extends relation is used when the extended class is in a file that is part of the project. If the extended class was found in a classpath .jar file, the relation is Java Extend Couple External. If the Indicates class implicitly extends the java.lang.Object class, the relation is Java Extend Couple Implicit. Java Extend Couple and Extendby Coupleby Java Implement Couple/Coupleby Indicates a class implements an interface. Java Implement Couple and Implementby Coupleby Java Create/Createby Indicates that an instance of a class is created (\u201cnew\u201d operator) in a scope. Java Create and Createby Java Declare/Declarein Indicates that a package is declared in a file or in a (parent) package. Java Declare and Declarein Java Define/Definein Indicates that an entity is defined in a scope. Java Define and Definein Java Define/Definein Implicit Todo: Java Define and Definein Implicit Java DotRef/DotRefby Indicates that an entity name was used to the left of a \u201c.\u201d in a qualified name. Java DotRef and DotRefby Java Export/Exportby Todo: Java Export and Exportby Java Import/Importby Java Import/Importby Demand Java Import indicates a file imports an individual class. For example, the some_file.java file might contain: import pack1.some_class; Java Import Demand indicates a file has an on-demand import statement for a package or class. For example, the some_file.java file might contain: import pack1.*; Java Import and Importby Java Modify/Modifyby Indicates that a variable\u2019s value is modified or both read and set, as with the increment (++), decrement (--), and assignment/operator combinations (*=, /=, ...). Java Modify and Modifyby Java ModuleUse/ModuleUseby Todo: Java ModuleUse and ModuleUseby Java Override/Overrideby Indicates that a method overrides a method from a parent class. Java Override and Overrideby Java Provide/Provideby Todo: Java Provide and Provideby Java Require/Requireby Todo: Java Require and Requireby Java Set/Setby Java Set indicates that a variable is set by a separate statement. Java Set and Setby Java Set/Setby Init Java Set Init indicates that a variable is initialized in its declaration. Java Set Init and Setby Init Java Set/Setby Partial Todo: Java Set Partial and Setby Partial Java Typed/Typedby Indicates the type of a variable or parameter. Java Typed and Typedby Java Use/Useby Indicates that a variable is used or read. Java Use and Useby Java Use/Useby Partial Todo: Java Use Partial and Useby Partial Java Use/Useby Ptr Todo: Java Use Ptr and Useby Ptr Java Use/Useby Return Todo: Java Use Return and Useby Return Java Open/Openby Todo: Java Open and Openby Java Throw/Throwby Indicates that a method throws an exception. Java Throw and Throwby Java End Indicates the end of a class, interface, or method. Java End and Endby Reference kind examples This section describes the example in Table 2 with more details. Call and Callby Indicates an invocation of a method. class class1 { void meth1() { ... } } class class2 { class1 some_obj; void meth2() { some_obj.meth1(); } } Reference kind string Entity performing references Entity being referenced Java Call meth2 meth1 Java Callby meth1 meth2 Java Call Nondynamic and Callby Nondynamic Indicates a non-dynamic invocation of a method. class class1 { void meth1() { ... } } class class2 extends class1 { class1 some_obj; void meth1() { super.meth1(); } } Reference kind string Entity performing references Entity being referenced Java Call Nondynamic class2.meth1 class1.meth1 Java Callby Nondynamic class1.meth1 class2.meth1 Java Cast and Castby Indicates a type is used to cast an instance to a different type. class c1 { ... } class c2 extends c1 { ... } class c3 { c2 b = new c2(); c1 a = (c1) b; } Reference kind string Entity performing references Entity being referenced Java Cast c3 c1 Java Castby c1 c3 Java Contain and Containin Indicates a class is in a package. package some_pack; class some_class { ... } Reference kind string Entity performing references Entity being referenced Java Contain some_pack some_class Java Containin some_class some_pack Java Couple and Coupleby Indicates a coupling link as counted in the OO coupling metrics. A link is created from a class to any external class (a class that is not in the extends/implements hierarchy) that is referenced. public class c1 { ... } public class c2 { cl obj; } Reference kind string Entity performing references Entity being referenced Java Couple c2 c1 Java Coupleby c1 c2 Java Extend Couple and Extendby Coupleby Indicates one class or interface extends another. This extends relation is used when the extended class is in a file that is part of the project. If the extended class was found in a classpath .jar file, the relation is Java Extend Couple External. If the Indicates class implicitly extends the java.lang.Object class, the relation is Java Extend Couple Implicit. [ ] Todo: add a short definition with and an example code and corresponding table for Java Extend Couple Implicit External and Java Extendby Coupleby Implicit External reference kind. // Example 1: class class1 { ... } class class2 extends class1 { ... } // Example 2: class some_class extends java.io.Writer { ... } // Example 3: class some_class { ... } // Example 4: //Todo Reference kind string Entity performing references Entity being referenced Java Extend Couple Ex 1: class2 Ex 1: class2 Java Extendby Coupleby Ex 1: class1 Ex 1: class1 Java Extend Couple External Ex 2: some_class Ex 2: java.io.Writer Java Extendby Coupleby External Ex 2: java.io.Writer Ex 2: some_class Java Extend Couple Implicit Ex 3: some_class Ex 3: java.lang.Object Java Extendby Coupleby Implicit Ex 3: java.lang.Object Ex 3: some_class Java Extend Couple Implicit External Todo Todo Java Extendby Coupleby Implicit External Todo Todo Java Implement Couple and Implementby Coupleby Indicates a class implements an interface. interface some_interface { ... } class some_class implements some_interface { ... } Reference kind string Entity performing references Entity being referenced Java Implement Couple some_class some_interface Java Implementby Coupleby some_interface some_class Java Create and Createby Indicates that an instance of a class is created ( new operator) in a scope. class c1 { ... } class c2 { c1 a = new c1(); } Reference kind string Entity performing references Entity being referenced Java Create c2 c1 Java Createby c1 c2 Java Declare and Declarein Indicates that a package is declared in a file or in a (parent) package. package technology.tabula.debug; import java.awt.BasicStroke; import java.awt.Color; class Debug { ... } Reference kind string Entity performing references Entity being referenced Java Declare Debug.java technology , technology.tabula.debug Java Declarein technology , technology.tabula.debug Debug.java Java Define and Definein Indicates that an entity is defined in a scope. //Example Define class some_class { int some_var = 5; } //Example Define implicit //Todo [ ] Todo: add a short definition with and an example code and corresponding table for Define Implicit and Definein Implicit reference kind. Reference kind string Entity performing references Entity being referenced Java Define some_class some_var Java Definein some_var some_class Java Define Implicit Todo: Todo: Java Definein Implicit Todo: Todo: Java DotRef and DotRefby Indicates that an entity name was used to the left of a \u201c.\u201d in a qualified name. package some_pack; class class1 { static int covid; } class class2 { void some_meth() { some_pack.class1.covid = 2021; } } Reference kind string Entity performing references Entity being referenced Java DotRef some_meth some_pack Java DotRefby some_pack some_meth Java Export and Exportby [ ] Todo: add a short definition with and an example code and corresponding table for this reference kind. Java Import and Importby Java Import indicates a file imports an individual class. For example, the some_file.java file might contain: import pack1.some_class; Java Import Demand indicates a file has an on-demand import statement for a package or class. For example, the some_file.java file might contain: import pack1.*; Reference kind string Entity performing references Entity being referenced Java Import some_file pack1.some_class Java Importby pack1.some_class some_file Java Import Demand some_file pack1 Java Importby Demand pack1 some_file Java Modify and Modifyby Indicates that a variable\u2019s value is modified or both read and set, as with the increment ( ++ ), decrement ( -- ), and assignment/operator combinations ( *= , /= , ...). class some_class { void some_meth() { int i = 5; i++; } } Reference kind string Entity performing references Entity being referenced Java Modify some_meth i Java Modifyby i some_meth Modify (Deref) Partial and Modifyby (Deref) Partial This reference is like Modify and Modifyby . But, it is used when an entity modifies some elements of a variable of collection type. public ProjectionProfile{ this.verticalProjection = new float[toFixed(areaHeight)]; this.horizontalProjection = new float[toFixed(areaWidth)]; private void addRectangle(Rectangle element) { // calculate horizontal and vertical projection profiles if (!area.contains(element)) { return; } this.minCharHeight = (float) Math.min(this.minCharHeight, element.getHeight()); this.minCharWidth = (float) Math.min(this.minCharWidth, element.getWidth()); for (int k = toFixed(element.getLeft()); k < toFixed(element.getRight()); k++) { this.horizontalProjection[k - toFixed(areaLeft)] += element.getHeight(); this.maxHorizontalProjection = Math.max(this.maxHorizontalProjection, this.horizontalProjection[k - toFixed(areaLeft)]); } } } Reference kind string Entity performing references Entity being referenced Java Modify Partial addRectangle horizontalProjection Java Modifyby Partial horizontalProjection addRectangle Java ModuleUse and ModuleUseby [ ] Todo: add a short definition with and an example code and corresponding table for this reference kind. Java Override and Overrideby Indicates that a method overrides a method from a parent class. class A { int some_meth() { ... } } class B extends A{ int some_meth() { ... } } Reference kind string Entity performing references Entity being referenced Java Override B.some_meth A.some_meth Java Overrideby A.some_meth B.some_meth Java Provide and Provideby [ ] Todo: add a short definition with and an example code and corresponding table for this reference kind. Java Require and Requireby [ ] Todo: add a short definition with and an example code and corresponding table for this reference kind. Java Set and Setby Java Set indicates that a variable is set by a separate statement. void some_meth() { int i; i = 5; } Java Set Init indicates that a variable is initialized in its declaration. void some_meth() { int i = 5; } [ ] Todo: add a short definition with and an example code and corresponding table for Set Partial and Setby Partial reference kinds. Reference kind string Entity performing references Entity being referenced Java Set some_meth i Java Setby i some_meth Java Set Init some_meth i Java Setby Init i some_meth Set Partial Todo: Todo: Setby Partial Todo: Todo: Java Typed and Typedby Indicates the type of a variable or parameter. class class1 { ... } class class2 { class1 some_obj; } Reference kind string Entity performing references Entity being referenced Java Typed some_obj class1 Java Typedby class1 some_obj Java Use and Useby Indicates that a variable is used or read. class some_class { int some_var; void some_meth() { int local_var = some_var; // read of some_var } } [ ] Todo: add a short definition with and an example code and corresponding table for Use Partial and Useby Partial reference kinds. [ ] Todo: add a short definition with and an example code and corresponding table for Use Ptr and Useby Ptr reference kinds. [ ] Todo: add a short definition with and an example code and corresponding table for Use Return and Useby Return reference kinds. Reference kind string Entity performing references Entity being referenced Java Use some_meth some_var Java Useby some_var some_meth Java Use Partial Todo: Todo: Java Useby Partial Todo: Todo: Java Use Ptr Todo: Todo: Java Useby Partial Todo: Todo: Java Use Return Todo: Todo: Java Useby Return Todo: Todo: Java Open and Openby [ ] Todo: add a short definition with and an example code and corresponding table for this reference kind. Java Throw and Throwby Indicates that a method throws an exception. void some_meth() throws java.io.IOException { ... } Reference kind string Entity performing references Entity being referenced Java Throw some_meth java_io.IOException Java Throwby java_io.IOException some_meth Java End and Endby Indicates the end of a class, interface, or method. [ ] Todo: Requires a better example (I cannot understand this kind in understand!) Reference kind string Entity performing references Entity being referenced Java End some_class some_class Java Endby some_class some_class References [1] SciTools, \u201cUnderstand,\u201d 2020. https://www.scitools.com/ (accessed Sep. 11, 2020).","title":"References kinds"},{"location":"reference_kinds/#reference-kinds","text":"The total number of Java references kinds is 34\u00d72=68. Table 2 lists the OpenUnderstand Java reference kinds, the kind names, and the kind examples for use with the Python API. Table 2. Java references kinds details Reference kind full name Description Example code snippet Java Call/Callby Indicates an invocation of a method. Call and Callby Java Call/Callby Nondynamic Indicates a non-dynamic invocation of a method. Java Call Nondynamic and Callby Nondynamic Java Cast/Castby Indicates a type is used to cast an instance to a different type. Java Cast and Castby Java Contain/Containin Indicates a class is in a package. Java Contain and Containin Java Couple/Coupleby Indicates a coupling link as counted in the OO coupling metrics. A link is created from a class to any external class (a class that is not in the extends/implements hierarchy) that is referenced. Java Couple and Coupleby Java Extend Couple/Coupleby Java Extend Couple/Coupleby External Java Extend Couple/Coupleby Implicit Java Extend Couple/Coupleby Implicit External Indicates one class or interface extends another. This extends relation is used when the extended class is in a file that is part of the project. If the extended class was found in a classpath .jar file, the relation is Java Extend Couple External. If the Indicates class implicitly extends the java.lang.Object class, the relation is Java Extend Couple Implicit. Java Extend Couple and Extendby Coupleby Java Implement Couple/Coupleby Indicates a class implements an interface. Java Implement Couple and Implementby Coupleby Java Create/Createby Indicates that an instance of a class is created (\u201cnew\u201d operator) in a scope. Java Create and Createby Java Declare/Declarein Indicates that a package is declared in a file or in a (parent) package. Java Declare and Declarein Java Define/Definein Indicates that an entity is defined in a scope. Java Define and Definein Java Define/Definein Implicit Todo: Java Define and Definein Implicit Java DotRef/DotRefby Indicates that an entity name was used to the left of a \u201c.\u201d in a qualified name. Java DotRef and DotRefby Java Export/Exportby Todo: Java Export and Exportby Java Import/Importby Java Import/Importby Demand Java Import indicates a file imports an individual class. For example, the some_file.java file might contain: import pack1.some_class; Java Import Demand indicates a file has an on-demand import statement for a package or class. For example, the some_file.java file might contain: import pack1.*; Java Import and Importby Java Modify/Modifyby Indicates that a variable\u2019s value is modified or both read and set, as with the increment (++), decrement (--), and assignment/operator combinations (*=, /=, ...). Java Modify and Modifyby Java ModuleUse/ModuleUseby Todo: Java ModuleUse and ModuleUseby Java Override/Overrideby Indicates that a method overrides a method from a parent class. Java Override and Overrideby Java Provide/Provideby Todo: Java Provide and Provideby Java Require/Requireby Todo: Java Require and Requireby Java Set/Setby Java Set indicates that a variable is set by a separate statement. Java Set and Setby Java Set/Setby Init Java Set Init indicates that a variable is initialized in its declaration. Java Set Init and Setby Init Java Set/Setby Partial Todo: Java Set Partial and Setby Partial Java Typed/Typedby Indicates the type of a variable or parameter. Java Typed and Typedby Java Use/Useby Indicates that a variable is used or read. Java Use and Useby Java Use/Useby Partial Todo: Java Use Partial and Useby Partial Java Use/Useby Ptr Todo: Java Use Ptr and Useby Ptr Java Use/Useby Return Todo: Java Use Return and Useby Return Java Open/Openby Todo: Java Open and Openby Java Throw/Throwby Indicates that a method throws an exception. Java Throw and Throwby Java End Indicates the end of a class, interface, or method. Java End and Endby","title":"Reference kinds"},{"location":"reference_kinds/#reference-kind-examples","text":"This section describes the example in Table 2 with more details.","title":"Reference kind examples"},{"location":"reference_kinds/#call-and-callby","text":"Indicates an invocation of a method. class class1 { void meth1() { ... } } class class2 { class1 some_obj; void meth2() { some_obj.meth1(); } } Reference kind string Entity performing references Entity being referenced Java Call meth2 meth1 Java Callby meth1 meth2","title":"Call and Callby"},{"location":"reference_kinds/#java-call-nondynamic-and-callby-nondynamic","text":"Indicates a non-dynamic invocation of a method. class class1 { void meth1() { ... } } class class2 extends class1 { class1 some_obj; void meth1() { super.meth1(); } } Reference kind string Entity performing references Entity being referenced Java Call Nondynamic class2.meth1 class1.meth1 Java Callby Nondynamic class1.meth1 class2.meth1","title":"Java Call Nondynamic and Callby Nondynamic"},{"location":"reference_kinds/#java-cast-and-castby","text":"Indicates a type is used to cast an instance to a different type. class c1 { ... } class c2 extends c1 { ... } class c3 { c2 b = new c2(); c1 a = (c1) b; } Reference kind string Entity performing references Entity being referenced Java Cast c3 c1 Java Castby c1 c3","title":"Java Cast and Castby"},{"location":"reference_kinds/#java-contain-and-containin","text":"Indicates a class is in a package. package some_pack; class some_class { ... } Reference kind string Entity performing references Entity being referenced Java Contain some_pack some_class Java Containin some_class some_pack","title":"Java Contain and Containin"},{"location":"reference_kinds/#java-couple-and-coupleby","text":"Indicates a coupling link as counted in the OO coupling metrics. A link is created from a class to any external class (a class that is not in the extends/implements hierarchy) that is referenced. public class c1 { ... } public class c2 { cl obj; } Reference kind string Entity performing references Entity being referenced Java Couple c2 c1 Java Coupleby c1 c2","title":"Java Couple and Coupleby"},{"location":"reference_kinds/#java-extend-couple-and-extendby-coupleby","text":"Indicates one class or interface extends another. This extends relation is used when the extended class is in a file that is part of the project. If the extended class was found in a classpath .jar file, the relation is Java Extend Couple External. If the Indicates class implicitly extends the java.lang.Object class, the relation is Java Extend Couple Implicit. [ ] Todo: add a short definition with and an example code and corresponding table for Java Extend Couple Implicit External and Java Extendby Coupleby Implicit External reference kind. // Example 1: class class1 { ... } class class2 extends class1 { ... } // Example 2: class some_class extends java.io.Writer { ... } // Example 3: class some_class { ... } // Example 4: //Todo Reference kind string Entity performing references Entity being referenced Java Extend Couple Ex 1: class2 Ex 1: class2 Java Extendby Coupleby Ex 1: class1 Ex 1: class1 Java Extend Couple External Ex 2: some_class Ex 2: java.io.Writer Java Extendby Coupleby External Ex 2: java.io.Writer Ex 2: some_class Java Extend Couple Implicit Ex 3: some_class Ex 3: java.lang.Object Java Extendby Coupleby Implicit Ex 3: java.lang.Object Ex 3: some_class Java Extend Couple Implicit External Todo Todo Java Extendby Coupleby Implicit External Todo Todo","title":"Java Extend Couple and Extendby Coupleby"},{"location":"reference_kinds/#java-implement-couple-and-implementby-coupleby","text":"Indicates a class implements an interface. interface some_interface { ... } class some_class implements some_interface { ... } Reference kind string Entity performing references Entity being referenced Java Implement Couple some_class some_interface Java Implementby Coupleby some_interface some_class","title":"Java Implement Couple and Implementby Coupleby"},{"location":"reference_kinds/#java-create-and-createby","text":"Indicates that an instance of a class is created ( new operator) in a scope. class c1 { ... } class c2 { c1 a = new c1(); } Reference kind string Entity performing references Entity being referenced Java Create c2 c1 Java Createby c1 c2","title":"Java Create and Createby"},{"location":"reference_kinds/#java-declare-and-declarein","text":"Indicates that a package is declared in a file or in a (parent) package. package technology.tabula.debug; import java.awt.BasicStroke; import java.awt.Color; class Debug { ... } Reference kind string Entity performing references Entity being referenced Java Declare Debug.java technology , technology.tabula.debug Java Declarein technology , technology.tabula.debug Debug.java","title":"Java Declare and Declarein"},{"location":"reference_kinds/#java-define-and-definein","text":"Indicates that an entity is defined in a scope. //Example Define class some_class { int some_var = 5; } //Example Define implicit //Todo [ ] Todo: add a short definition with and an example code and corresponding table for Define Implicit and Definein Implicit reference kind. Reference kind string Entity performing references Entity being referenced Java Define some_class some_var Java Definein some_var some_class Java Define Implicit Todo: Todo: Java Definein Implicit Todo: Todo:","title":"Java Define and Definein"},{"location":"reference_kinds/#java-dotref-and-dotrefby","text":"Indicates that an entity name was used to the left of a \u201c.\u201d in a qualified name. package some_pack; class class1 { static int covid; } class class2 { void some_meth() { some_pack.class1.covid = 2021; } } Reference kind string Entity performing references Entity being referenced Java DotRef some_meth some_pack Java DotRefby some_pack some_meth","title":"Java DotRef and DotRefby"},{"location":"reference_kinds/#java-export-and-exportby","text":"[ ] Todo: add a short definition with and an example code and corresponding table for this reference kind.","title":"Java Export and Exportby"},{"location":"reference_kinds/#java-import-and-importby","text":"Java Import indicates a file imports an individual class. For example, the some_file.java file might contain: import pack1.some_class; Java Import Demand indicates a file has an on-demand import statement for a package or class. For example, the some_file.java file might contain: import pack1.*; Reference kind string Entity performing references Entity being referenced Java Import some_file pack1.some_class Java Importby pack1.some_class some_file Java Import Demand some_file pack1 Java Importby Demand pack1 some_file","title":"Java Import and Importby"},{"location":"reference_kinds/#java-modify-and-modifyby","text":"Indicates that a variable\u2019s value is modified or both read and set, as with the increment ( ++ ), decrement ( -- ), and assignment/operator combinations ( *= , /= , ...). class some_class { void some_meth() { int i = 5; i++; } } Reference kind string Entity performing references Entity being referenced Java Modify some_meth i Java Modifyby i some_meth","title":"Java Modify and Modifyby"},{"location":"reference_kinds/#modify-deref-partial-and-modifyby-deref-partial","text":"This reference is like Modify and Modifyby . But, it is used when an entity modifies some elements of a variable of collection type. public ProjectionProfile{ this.verticalProjection = new float[toFixed(areaHeight)]; this.horizontalProjection = new float[toFixed(areaWidth)]; private void addRectangle(Rectangle element) { // calculate horizontal and vertical projection profiles if (!area.contains(element)) { return; } this.minCharHeight = (float) Math.min(this.minCharHeight, element.getHeight()); this.minCharWidth = (float) Math.min(this.minCharWidth, element.getWidth()); for (int k = toFixed(element.getLeft()); k < toFixed(element.getRight()); k++) { this.horizontalProjection[k - toFixed(areaLeft)] += element.getHeight(); this.maxHorizontalProjection = Math.max(this.maxHorizontalProjection, this.horizontalProjection[k - toFixed(areaLeft)]); } } } Reference kind string Entity performing references Entity being referenced Java Modify Partial addRectangle horizontalProjection Java Modifyby Partial horizontalProjection addRectangle","title":"Modify (Deref) Partial and Modifyby (Deref) Partial"},{"location":"reference_kinds/#java-moduleuse-and-moduleuseby","text":"[ ] Todo: add a short definition with and an example code and corresponding table for this reference kind.","title":"Java ModuleUse and ModuleUseby"},{"location":"reference_kinds/#java-override-and-overrideby","text":"Indicates that a method overrides a method from a parent class. class A { int some_meth() { ... } } class B extends A{ int some_meth() { ... } } Reference kind string Entity performing references Entity being referenced Java Override B.some_meth A.some_meth Java Overrideby A.some_meth B.some_meth","title":"Java Override and Overrideby"},{"location":"reference_kinds/#java-provide-and-provideby","text":"[ ] Todo: add a short definition with and an example code and corresponding table for this reference kind.","title":"Java Provide and Provideby"},{"location":"reference_kinds/#java-require-and-requireby","text":"[ ] Todo: add a short definition with and an example code and corresponding table for this reference kind.","title":"Java Require and Requireby"},{"location":"reference_kinds/#java-set-and-setby","text":"Java Set indicates that a variable is set by a separate statement. void some_meth() { int i; i = 5; } Java Set Init indicates that a variable is initialized in its declaration. void some_meth() { int i = 5; } [ ] Todo: add a short definition with and an example code and corresponding table for Set Partial and Setby Partial reference kinds. Reference kind string Entity performing references Entity being referenced Java Set some_meth i Java Setby i some_meth Java Set Init some_meth i Java Setby Init i some_meth Set Partial Todo: Todo: Setby Partial Todo: Todo:","title":"Java Set and Setby"},{"location":"reference_kinds/#java-typed-and-typedby","text":"Indicates the type of a variable or parameter. class class1 { ... } class class2 { class1 some_obj; } Reference kind string Entity performing references Entity being referenced Java Typed some_obj class1 Java Typedby class1 some_obj","title":"Java Typed and Typedby"},{"location":"reference_kinds/#java-use-and-useby","text":"Indicates that a variable is used or read. class some_class { int some_var; void some_meth() { int local_var = some_var; // read of some_var } } [ ] Todo: add a short definition with and an example code and corresponding table for Use Partial and Useby Partial reference kinds. [ ] Todo: add a short definition with and an example code and corresponding table for Use Ptr and Useby Ptr reference kinds. [ ] Todo: add a short definition with and an example code and corresponding table for Use Return and Useby Return reference kinds. Reference kind string Entity performing references Entity being referenced Java Use some_meth some_var Java Useby some_var some_meth Java Use Partial Todo: Todo: Java Useby Partial Todo: Todo: Java Use Ptr Todo: Todo: Java Useby Partial Todo: Todo: Java Use Return Todo: Todo: Java Useby Return Todo: Todo:","title":"Java Use and Useby"},{"location":"reference_kinds/#java-open-and-openby","text":"[ ] Todo: add a short definition with and an example code and corresponding table for this reference kind.","title":"Java Open and Openby"},{"location":"reference_kinds/#java-throw-and-throwby","text":"Indicates that a method throws an exception. void some_meth() throws java.io.IOException { ... } Reference kind string Entity performing references Entity being referenced Java Throw some_meth java_io.IOException Java Throwby java_io.IOException some_meth","title":"Java Throw and Throwby"},{"location":"reference_kinds/#java-end-and-endby","text":"Indicates the end of a class, interface, or method. [ ] Todo: Requires a better example (I cannot understand this kind in understand!) Reference kind string Entity performing references Entity being referenced Java End some_class some_class Java Endby some_class some_class","title":"Java End and Endby"},{"location":"reference_kinds/#references","text":"[1] SciTools, \u201cUnderstand,\u201d 2020. https://www.scitools.com/ (accessed Sep. 11, 2020).","title":"References"},{"location":"source_code_metrics/","text":"Source code metrics Source code metrics are essential components in the software measurement process. They are extracted from the source code of the software, and their values allow us to reach conclusions about the quality attributes measured by the metrics. OpenUnderstand supports the following source code metrics for the Java programming language. Table 3. OpenUnderstand source code metrics for Java API name Friendly name Description AvgCyclomatic Average Cyclomatic Complexity Average cyclomatic complexity for all nested functions or methods. AvgCyclomaticModified Average Modified Cyclomatic Complexity Average modified cyclomatic complexity for all nested functions or methods. AvgCyclomaticStrict Average Strict Cyclomatic Complexity Average strict cyclomatic complexity for all nested functions or methods. AvgEssential Average Essential Cyclomatic Complexity Average Essential complexity for all nested functions or methods. AvgLine Average Number of Lines Average number of lines for all nested functions or methods. AvgLineBlank Average Number of Blank Lines Average number of blank for all nested functions or methods. AvgLineCode Average Number of Lines of Code Average number of lines containing source code for all nested functions or methods. AvgLineComment Average Number of Lines with Comments Average number of lines containing comment for all nested functions or methods. CountClassBase Base Classes Number of immediate base classes. [aka IFANIN] CountClassCoupled Coupling Between Objects Number of other classes coupled to. [aka CBO (coupling between object classes)] CountClassDerived Number of Children Number of immediate subclasses. [aka NOC (number of children)] CountDeclClass Classes Number of classes. CountDeclClassMethod Class Methods Number of class methods. CountDeclClassVariable Class Variables Number of class variables. CountDeclExecutableUnit Executable Unit Number of program units with executable code. CountDeclFile Number of Files Number of files. CountDeclFunction Function Number of functions. CountDeclInstanceMethod Instance Methods Number of instance methods. [aka NIM] CountDeclInstanceVariable Instance Variables Number of instance variables. [aka NIV] CountDeclMethod Local Methods Number of local methods. CountDeclMethodAll Methods Number of methods, including inherited ones. [aka RFC (response for class)] CountDeclMethodDefault Local Default Visibility Methods Number of local default methods. CountDeclMethodPrivate Private Methods Number of local private methods. [aka NPM] CountDeclMethodProtected Protected Methods Number of local protected methods. CountDeclMethodPublic Public Methods Number of local public methods. [aka NPRM] CountInput Inputs Number of calling subprograms plus global variables read. [aka FANIN] CountLine Physical Lines Number of all lines. [aka NL] CountLineBlank Blank Lines of Code Number of blank lines. [aka BLOC] CountLineCode Source Lines of Code Number of lines containing source code. [aka LOC] CountLineCodeDecl Declarative Lines of Code Number of lines containing declarative source code. CountLineCodeExe Executable Lines of Code Number of lines containing executable source code. CountLineComment Lines with Comments Number of lines containing comment. [aka CLOC] CountOutput Outputs Number of called subprograms plus global variables set. [aka FANOUT] CountPath Paths Number of possible paths, not counting abnormal exits or gotos. [aka NPATH] CountPathLog Paths Log(x) Log10, truncated to an integer value, of the metric CountPath CountSemicolon Semicolons Number of semicolons. CountStmt Statements Number of statements. CountStmtDecl Declarative Statements Number of declarative statements. CountStmtExe Executable Statements Number of executable statements. Cyclomatic Cyclomatic Complexity Cyclomatic complexity. CyclomaticModified Modified Cyclomatic Complexity Modified cyclomatic complexity. CyclomaticStrict Strict Cyclomatic Complexity Strict cyclomatic complexity. Essential Essential Complexity Essential complexity. [aka Ev(G)] Knots Knots Measure of overlapping jumps. MaxCyclomatic Max Cyclomatic Complexity Maximum cyclomatic complexity of all nested functions or methods. MaxCyclomaticModified Max Modified Cyclomatic Complexity Maximum modified cyclomatic complexity of nested functions or methods. MaxCyclomaticStrict Max Strict Cyclomatic Complexity Maximum strict cyclomatic complexity of nested functions or methods. MaxEssential Max Essential Complexity Maximum essential complexity of all nested functions or methods. MaxEssentialKnots Max Knots Maximum Knots after structured programming constructs have been removed. MaxInheritanceTree Depth of Inheritance Tree Maximum depth of class in inheritance tree. [aka DIT] MaxNesting Nesting Maximum nesting level of control constructs. MinEssentialKnots Minimum Knots Minimum Knots after structured programming constructs have been removed. PercentLackOfCohesion Lack of Cohesion in Methods 100% minus the average cohesion for package entities. [aka LCOM, LOCM] PercentLackOfCohesionModified Modified Lack of Cohesion in Methods 100% minus the average cohesion for class data members, modified for accessor methods RatioCommentToCode Comment to Code Ratio Ratio of comment lines to code lines. SumCyclomatic Sum Cyclomatic Complexity Sum of cyclomatic complexity of all nested functions or methods. [aka WMC] SumCyclomaticModified Sum Modified Cyclomatic Complexity Sum of modified cyclomatic complexity of all nested functions or methods. SumCyclomaticStrict Sum Strict Cyclomatic Complexity Sum of strict cyclomatic complexity of all nested functions or methods. SumEssential Sum Essential Complexity Sum of essential complexity of all nested functions or methods. NAMM Number of Accessor (Getter) and Mutator (Setter) Methods NOID Number of Identifiers NOKW Number of Keywords HCPL Halstead Calculated Program Length HDIF Halstead Difficulty HEFF Halstead Effort HNDB Halstead Number of Delivered Bugs HPL Halstead Program Length HPV Halstead Program Vocabulary HTRP Halstead Time Required to Program HVOL Halstead Volume NOABSCLASS Number of Abstract Class NOINTERFACE NOINTERFACE","title":"Source code metrics"},{"location":"source_code_metrics/#source-code-metrics","text":"Source code metrics are essential components in the software measurement process. They are extracted from the source code of the software, and their values allow us to reach conclusions about the quality attributes measured by the metrics. OpenUnderstand supports the following source code metrics for the Java programming language. Table 3. OpenUnderstand source code metrics for Java API name Friendly name Description AvgCyclomatic Average Cyclomatic Complexity Average cyclomatic complexity for all nested functions or methods. AvgCyclomaticModified Average Modified Cyclomatic Complexity Average modified cyclomatic complexity for all nested functions or methods. AvgCyclomaticStrict Average Strict Cyclomatic Complexity Average strict cyclomatic complexity for all nested functions or methods. AvgEssential Average Essential Cyclomatic Complexity Average Essential complexity for all nested functions or methods. AvgLine Average Number of Lines Average number of lines for all nested functions or methods. AvgLineBlank Average Number of Blank Lines Average number of blank for all nested functions or methods. AvgLineCode Average Number of Lines of Code Average number of lines containing source code for all nested functions or methods. AvgLineComment Average Number of Lines with Comments Average number of lines containing comment for all nested functions or methods. CountClassBase Base Classes Number of immediate base classes. [aka IFANIN] CountClassCoupled Coupling Between Objects Number of other classes coupled to. [aka CBO (coupling between object classes)] CountClassDerived Number of Children Number of immediate subclasses. [aka NOC (number of children)] CountDeclClass Classes Number of classes. CountDeclClassMethod Class Methods Number of class methods. CountDeclClassVariable Class Variables Number of class variables. CountDeclExecutableUnit Executable Unit Number of program units with executable code. CountDeclFile Number of Files Number of files. CountDeclFunction Function Number of functions. CountDeclInstanceMethod Instance Methods Number of instance methods. [aka NIM] CountDeclInstanceVariable Instance Variables Number of instance variables. [aka NIV] CountDeclMethod Local Methods Number of local methods. CountDeclMethodAll Methods Number of methods, including inherited ones. [aka RFC (response for class)] CountDeclMethodDefault Local Default Visibility Methods Number of local default methods. CountDeclMethodPrivate Private Methods Number of local private methods. [aka NPM] CountDeclMethodProtected Protected Methods Number of local protected methods. CountDeclMethodPublic Public Methods Number of local public methods. [aka NPRM] CountInput Inputs Number of calling subprograms plus global variables read. [aka FANIN] CountLine Physical Lines Number of all lines. [aka NL] CountLineBlank Blank Lines of Code Number of blank lines. [aka BLOC] CountLineCode Source Lines of Code Number of lines containing source code. [aka LOC] CountLineCodeDecl Declarative Lines of Code Number of lines containing declarative source code. CountLineCodeExe Executable Lines of Code Number of lines containing executable source code. CountLineComment Lines with Comments Number of lines containing comment. [aka CLOC] CountOutput Outputs Number of called subprograms plus global variables set. [aka FANOUT] CountPath Paths Number of possible paths, not counting abnormal exits or gotos. [aka NPATH] CountPathLog Paths Log(x) Log10, truncated to an integer value, of the metric CountPath CountSemicolon Semicolons Number of semicolons. CountStmt Statements Number of statements. CountStmtDecl Declarative Statements Number of declarative statements. CountStmtExe Executable Statements Number of executable statements. Cyclomatic Cyclomatic Complexity Cyclomatic complexity. CyclomaticModified Modified Cyclomatic Complexity Modified cyclomatic complexity. CyclomaticStrict Strict Cyclomatic Complexity Strict cyclomatic complexity. Essential Essential Complexity Essential complexity. [aka Ev(G)] Knots Knots Measure of overlapping jumps. MaxCyclomatic Max Cyclomatic Complexity Maximum cyclomatic complexity of all nested functions or methods. MaxCyclomaticModified Max Modified Cyclomatic Complexity Maximum modified cyclomatic complexity of nested functions or methods. MaxCyclomaticStrict Max Strict Cyclomatic Complexity Maximum strict cyclomatic complexity of nested functions or methods. MaxEssential Max Essential Complexity Maximum essential complexity of all nested functions or methods. MaxEssentialKnots Max Knots Maximum Knots after structured programming constructs have been removed. MaxInheritanceTree Depth of Inheritance Tree Maximum depth of class in inheritance tree. [aka DIT] MaxNesting Nesting Maximum nesting level of control constructs. MinEssentialKnots Minimum Knots Minimum Knots after structured programming constructs have been removed. PercentLackOfCohesion Lack of Cohesion in Methods 100% minus the average cohesion for package entities. [aka LCOM, LOCM] PercentLackOfCohesionModified Modified Lack of Cohesion in Methods 100% minus the average cohesion for class data members, modified for accessor methods RatioCommentToCode Comment to Code Ratio Ratio of comment lines to code lines. SumCyclomatic Sum Cyclomatic Complexity Sum of cyclomatic complexity of all nested functions or methods. [aka WMC] SumCyclomaticModified Sum Modified Cyclomatic Complexity Sum of modified cyclomatic complexity of all nested functions or methods. SumCyclomaticStrict Sum Strict Cyclomatic Complexity Sum of strict cyclomatic complexity of all nested functions or methods. SumEssential Sum Essential Complexity Sum of essential complexity of all nested functions or methods. NAMM Number of Accessor (Getter) and Mutator (Setter) Methods NOID Number of Identifiers NOKW Number of Keywords HCPL Halstead Calculated Program Length HDIF Halstead Difficulty HEFF Halstead Effort HNDB Halstead Number of Delivered Bugs HPL Halstead Program Length HPV Halstead Program Vocabulary HTRP Halstead Time Required to Program HVOL Halstead Volume NOABSCLASS Number of Abstract Class NOINTERFACE NOINTERFACE","title":"Source code metrics"},{"location":"tutorials/","text":"Tutorials Please refer to CodART tutorials ANTLR basics .","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"Please refer to CodART tutorials ANTLR basics .","title":"Tutorials"},{"location":"code_graphs/control_flow_graph/","text":"Control flow graph Describing the CFG implementation. To be announced.","title":"Control flow graph"},{"location":"code_graphs/control_flow_graph/#control-flow-graph","text":"Describing the CFG implementation. To be announced.","title":"Control flow graph"},{"location":"proposals/code_review_and_bug_fixing/","text":"Code review and bug fixing Reading: 5 minutes, Last update: 25 April 2022 The following proposal has been initially prepared for the IUST Compiler course. In addition, the students who want to collaborate on the project later are expected to work on this proposal. Note 1: Before reading this proposal ensure that you have read and understood the OpenUnderstand white-paper . For the proposal of this phase, each referee group must review the code and fix the bugs of their assignee group in the previous phases, i.e., Phase I and Phase II . The results of bug fixing are delivered as pull requests on the same modules developed by the assignee groups in the previous phases. In cases where the assignee group has not developed a required module, the referee group is asked to implement the module. Note 2: Before code review and bug fixing ensure that you have pulled the latest version of the OpenUnderstand repository. For final presentation, your code must pass all unit tests and have no conflicts with other modules. Unit tests are under development, and we will inform you as they are released. Note 3: Each python module should follow PEP -- Style Guide for Python Code and document well.","title":"Code review and bug fixing"},{"location":"proposals/code_review_and_bug_fixing/#code-review-and-bug-fixing","text":"Reading: 5 minutes, Last update: 25 April 2022 The following proposal has been initially prepared for the IUST Compiler course. In addition, the students who want to collaborate on the project later are expected to work on this proposal. Note 1: Before reading this proposal ensure that you have read and understood the OpenUnderstand white-paper . For the proposal of this phase, each referee group must review the code and fix the bugs of their assignee group in the previous phases, i.e., Phase I and Phase II . The results of bug fixing are delivered as pull requests on the same modules developed by the assignee groups in the previous phases. In cases where the assignee group has not developed a required module, the referee group is asked to implement the module. Note 2: Before code review and bug fixing ensure that you have pulled the latest version of the OpenUnderstand repository. For final presentation, your code must pass all unit tests and have no conflicts with other modules. Unit tests are under development, and we will inform you as they are released. Note 3: Each python module should follow PEP -- Style Guide for Python Code and document well.","title":"Code review and bug fixing"},{"location":"proposals/core_code_graphs_development/","text":"Core code graph development Reading: 5 minutes, Last update: 10 March 2022 To be announced soon.","title":"Core code graphs and visualiztion development"},{"location":"proposals/core_code_graphs_development/#core-code-graph-development","text":"Reading: 5 minutes, Last update: 10 March 2022 To be announced soon.","title":"Core code graph development"},{"location":"proposals/core_entity_reference_development/","text":"Core entity-reference development Reading: 5 minutes, Last update: 10 March 2022 The following proposal has been initially prepared for the IUST Compiler and IUST Advanced Compiler courses in Fall 2021 and Winter/Spring 2022 . Note 1: Before reading this proposal ensure that you have read and understood the OpenUnderstand white-paper . Students must form groups of up to four persons. Each group develops analysis passes to find a subset of references kinds listed in Table 2 along with their corresponding entities. The exact list of reference kind will be assigned to each group subsequently. The entity kinds in Table 1 and references kinds in Table 2 may update during the semester for bug fixing purposes. Note 2: Each pair of references kinds must be implemented as a standalone Python module (single .py file) in the openuderstand.analysis_passes package. Consider the existing modules in the packages as examples. Note 3: Each python module should follow PEP -- Style Guide for Python Code and document well. Note 4: Each group is asked to review the code of at least one other group in the classroom. Your final project score is computed considering the score given by referees to each member of the team. Note 5: Before developing your codes ensure that you have pulled the latest version of the OpenUnderstand repository. For final presentation, your code must pass all unit tests and have no conflicts with other modules. Unit tests are under development, and we will inform you as they are released. Keep in touch!","title":"Core entity-reference development"},{"location":"proposals/core_entity_reference_development/#core-entity-reference-development","text":"Reading: 5 minutes, Last update: 10 March 2022 The following proposal has been initially prepared for the IUST Compiler and IUST Advanced Compiler courses in Fall 2021 and Winter/Spring 2022 . Note 1: Before reading this proposal ensure that you have read and understood the OpenUnderstand white-paper . Students must form groups of up to four persons. Each group develops analysis passes to find a subset of references kinds listed in Table 2 along with their corresponding entities. The exact list of reference kind will be assigned to each group subsequently. The entity kinds in Table 1 and references kinds in Table 2 may update during the semester for bug fixing purposes. Note 2: Each pair of references kinds must be implemented as a standalone Python module (single .py file) in the openuderstand.analysis_passes package. Consider the existing modules in the packages as examples. Note 3: Each python module should follow PEP -- Style Guide for Python Code and document well. Note 4: Each group is asked to review the code of at least one other group in the classroom. Your final project score is computed considering the score given by referees to each member of the team. Note 5: Before developing your codes ensure that you have pulled the latest version of the OpenUnderstand repository. For final presentation, your code must pass all unit tests and have no conflicts with other modules. Unit tests are under development, and we will inform you as they are released. Keep in touch!","title":"Core entity-reference development"},{"location":"proposals/core_source_code_metrics_development/","text":"Core source code metrics development Reading: 5 minutes, Last update: 10 March 2022 The following proposal has been initially prepared for the IUST Compiler and IUST Advanced Compiler courses in Winter/Spring 2022 . Note 1: Before reading this proposal ensure that you have read and understood the OpenUnderstand white-paper . Students must form groups of up to four persons. Each group develops analysis passes to compute the value of source code metrics listed in Table 3 .The exact list of the metrics will be assigned to each group subsequently. The description of the source code metrics listed in Table 3 may update during the semester. Note 2: The computation of each source code metric must be implemented as a standalone Python module (single .py file) in the openuderstand.metrics package. Consider the existing modules in the packages as examples. Note 3: Each module should follow PEP -- Style Guide for Python Code and document well. Note 4: Each group is asked to review the code of at least one other group in the classroom. Your final project score is computed considering the score given by referees to each member of the team. Note 5: Before developing your codes ensure that you have pulled the latest version of the OpenUnderstand repository. For final presentation, your code must pass all unit tests and have no conflicts with other modules. Unit tests are under development, and we will inform you as they are released. Keep in touch!","title":"Core source code metrics development"},{"location":"proposals/core_source_code_metrics_development/#core-source-code-metrics-development","text":"Reading: 5 minutes, Last update: 10 March 2022 The following proposal has been initially prepared for the IUST Compiler and IUST Advanced Compiler courses in Winter/Spring 2022 . Note 1: Before reading this proposal ensure that you have read and understood the OpenUnderstand white-paper . Students must form groups of up to four persons. Each group develops analysis passes to compute the value of source code metrics listed in Table 3 .The exact list of the metrics will be assigned to each group subsequently. The description of the source code metrics listed in Table 3 may update during the semester. Note 2: The computation of each source code metric must be implemented as a standalone Python module (single .py file) in the openuderstand.metrics package. Consider the existing modules in the packages as examples. Note 3: Each module should follow PEP -- Style Guide for Python Code and document well. Note 4: Each group is asked to review the code of at least one other group in the classroom. Your final project score is computed considering the score given by referees to each member of the team. Note 5: Before developing your codes ensure that you have pulled the latest version of the OpenUnderstand repository. For final presentation, your code must pass all unit tests and have no conflicts with other modules. Unit tests are under development, and we will inform you as they are released. Keep in touch!","title":"Core source code metrics development"},{"location":"reference_kinds/call_callby/","text":"Java Call and Callby reference kind Description This module find all OpenUnderstand call and callby references in a Java project References CallAndCallBy Todo: Implementing the ANTLR listener pass for Java Call and Java Callby reference kind","title":"Call and Callby"},{"location":"reference_kinds/call_callby/#java-call-and-callby-reference-kind","text":"","title":"Java Call and Callby reference kind"},{"location":"reference_kinds/call_callby/#openunderstand.analysis_passes.call_callby--description","text":"This module find all OpenUnderstand call and callby references in a Java project","title":"Description"},{"location":"reference_kinds/call_callby/#openunderstand.analysis_passes.call_callby--references","text":"","title":"References"},{"location":"reference_kinds/call_callby/#openunderstand.analysis_passes.call_callby.CallAndCallBy","text":"","title":"CallAndCallBy"},{"location":"reference_kinds/call_callby/#openunderstand.analysis_passes.call_callby.CallAndCallBy--todo-implementing-the-antlr-listener-pass-for-java-call-and-java-callby-reference-kind","text":"","title":"Todo: Implementing the ANTLR listener pass for Java Call and Java Callby reference kind"}]}